import 'setimmediate';
import { ExternallyOwnedAccount, Signer } from '@ethersproject/abstract-signer';
import { JsonRpcProvider } from '@ethersproject/providers';
import { HardhatEthersHelpers } from '@nomiclabs/hardhat-ethers/types';
import { Currency, CurrencyAmount } from '@uniswap/sdk-core';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { AddressLike, Hardhat as IHardhat } from '../hardhat';
declare type OneOrMany<T> = T | T[];
export declare class Hardhat implements IHardhat {
    readonly hre: HardhatRuntimeEnvironment & {
        ethers: HardhatEthersHelpers;
    };
    readonly url: string;
    readonly accounts: ExternallyOwnedAccount[];
    readonly providers: JsonRpcProvider[];
    constructor(hre: HardhatRuntimeEnvironment & {
        ethers: HardhatEthersHelpers;
    }, url: string, accounts: ExternallyOwnedAccount[]);
    get account(): ExternallyOwnedAccount;
    get provider(): JsonRpcProvider;
    fork(blockNumber?: number | undefined): Promise<void>;
    forkAndFund(address: AddressLike, amounts: OneOrMany<CurrencyAmount<Currency>>): Promise<void>;
    getBalance(address: AddressLike, currencies: Currency): Promise<CurrencyAmount<Currency>>;
    getBalance(address: AddressLike, currencies: Currency[]): Promise<CurrencyAmount<Currency>>[];
    setBalance(address: AddressLike, amounts: OneOrMany<CurrencyAmount<Currency>>, whales?: string[]): Promise<void>;
    fund(address: AddressLike, amounts: OneOrMany<CurrencyAmount<Currency>>, whales?: string[]): Promise<void>;
    approve(account: ExternallyOwnedAccount | Signer, spender: AddressLike, currencies: OneOrMany<Currency | CurrencyAmount<Currency>>): Promise<void>;
    send(method: string, params?: any[]): Promise<any>;
}
export {};
