"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hardhat = void 0;
require("setimmediate");
const abstract_signer_1 = require("@ethersproject/abstract-signer");
const sdk_core_1 = require("@uniswap/sdk-core");
const assert_1 = __importDefault(require("assert"));
const types_1 = require("../types");
const whales_1 = require("./whales");
class Hardhat {
    constructor(hre, url, accounts) {
        this.hre = hre;
        this.url = url;
        this.accounts = accounts;
        this.providers = accounts.map((account) => new Proxy(hre.ethers.provider, {
            get(target, prop) {
                switch (prop) {
                    case 'listAccounts':
                        return () => Promise.resolve([account.address]);
                    case 'getSigner':
                        return () => hre.ethers.provider.getSigner(account.address);
                    default:
                        return Reflect.get(target, prop);
                }
            },
        }));
    }
    get account() {
        return this.accounts[0];
    }
    get provider() {
        return this.providers[0];
    }
    fork(blockNumber) {
        var _a, _b;
        if (blockNumber === void 0) { blockNumber = (_a = this.hre.config.networks.hardhat.forking) === null || _a === void 0 ? void 0 : _a.blockNumber; }
        return __awaiter(this, void 0, void 0, function* () {
            return this.hre.network.provider.send('hardhat_reset', [
                {
                    forking: { jsonRpcUrl: (_b = this.hre.config.networks.hardhat.forking) === null || _b === void 0 ? void 0 : _b.url, blockNumber },
                },
            ]);
        });
    }
    forkAndFund(address, amounts) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fork();
            return this.fund(address, amounts);
        });
    }
    getBalance(address, currencies) {
        if (!Array.isArray(currencies))
            return this.getBalance(address, [currencies])[0];
        if (typeof address !== 'string')
            return this.getBalance(address.address, currencies);
        return currencies.map((currency) => __awaiter(this, void 0, void 0, function* () {
            const balance = yield (() => {
                if (currency.isNative)
                    return this.hre.ethers.provider.getBalance(address);
                (0, assert_1.default)(currency.isToken);
                const token = types_1.Erc20__factory.connect(currency.address, this.hre.ethers.provider);
                return token.balanceOf(address);
            })();
            return sdk_core_1.CurrencyAmount.fromRawAmount(currency, balance.toString());
        }));
    }
    setBalance(address, amounts, whales) {
        return this.fund(address, amounts, whales);
    }
    fund(address, amounts, whales = whales_1.WHALES) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(amounts))
                return this.fund(address, [amounts], whales);
            if (typeof address !== 'string')
                return this.fund(address.address, amounts, whales);
            const impersonations = whales.map((whale) => this.hre.network.provider.send('hardhat_impersonateAccount', [whale]));
            yield Promise.all(amounts.map((amount) => __awaiter(this, void 0, void 0, function* () {
                const { currency } = amount;
                const balance = this.hre.ethers.utils.parseUnits(amount.toExact(), currency.decimals);
                if (currency.isNative) {
                    return this.hre.network.provider.send('hardhat_setBalance', [
                        address,
                        this.hre.ethers.utils.hexValue(balance),
                    ]);
                }
                (0, assert_1.default)(currency.isToken);
                for (let i = 0; i < whales.length; ++i) {
                    yield impersonations[i];
                    const whale = this.hre.ethers.provider.getSigner(whales[i]);
                    try {
                        const token = types_1.Erc20__factory.connect(currency.address, whale);
                        yield token.transfer(address, balance);
                        return;
                    }
                    catch (e) {
                        throw new Error(`Could not fund ${amount.toExact()} ${currency.symbol} from any whales`);
                    }
                }
            })));
        });
    }
    approve(account, spender, currencies) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!Array.isArray(currencies))
                return this.approve(account, spender, [currencies]);
            if (typeof spender !== 'string')
                return this.approve(account, spender.address, currencies);
            yield Promise.all(currencies.map((currencyOrAmount) => __awaiter(this, void 0, void 0, function* () {
                const [currency, limit] = 'currency' in currencyOrAmount
                    ? [
                        currencyOrAmount.currency,
                        this.hre.ethers.utils.parseUnits(currencyOrAmount.toExact(), currencyOrAmount.currency.decimals),
                    ]
                    : [currencyOrAmount, this.hre.ethers.constants.MaxUint256];
                if (currency.isNative)
                    return;
                (0, assert_1.default)(currency.isToken);
                const signer = abstract_signer_1.Signer.isSigner(account)
                    ? account
                    : new this.hre.ethers.Wallet(account, this.hre.ethers.provider);
                const token = types_1.Erc20__factory.connect(currency.address, signer);
                const approval = yield token.approve(spender, limit);
                return approval.wait();
            })));
        });
    }
    send(method, params) {
        return this.hre.network.provider.send(method, params);
    }
}
exports.Hardhat = Hardhat;
