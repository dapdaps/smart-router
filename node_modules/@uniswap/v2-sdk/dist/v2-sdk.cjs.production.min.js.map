{"version":3,"file":"v2-sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"sourcesContent":["import { Percent } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\nexport const BASIS_POINTS = JSBI.BigInt(10000)\n\nexport const ZERO_PERCENT = new Percent(ZERO)\nexport const ONE_HUNDRED_PERCENT = new Percent(ONE)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\nimport { BigNumber } from '@ethersproject/bignumber'\n\nimport {\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  FIVE,\n  _997,\n  _1000,\n  ONE,\n  ZERO,\n  BASIS_POINTS,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT\n} from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  /**\n   * getAmountOut is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer tax, intuitively it's just:\n   * inputAmountWithFeeAndTax = 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                          = (1 - amountIn.sellFeesBips / 10000) * amountInWithFee\n   * where amountInWithFee is the amountIn after taking out the LP fees\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountOut\n   *\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * amountOut = (B - B') / (1 - amountOut.buyFeesBips / 10000) # where A' * B' still is k\n   *           = (B - K/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B - AB/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = ((BA + B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn - AB)/(A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn))\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   *           = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn / (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *             /\n   *             (1 - amountOut.buyFeesBips / 10000)\n   * amountOut * (1 - amountOut.buyFeesBips / 10000) = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                                                    /\n   *                                                    (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *\n   * outputAmountWithTax = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn\n   *                       /\n   *                       (A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn)\n   *                       = (B * 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn * 1000\n   *                       /\n   *                       ((A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn) * 1000)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) 997 * * amountIn\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * 997 * amountIn)\n   *                     = (B * (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                       /\n   *                       (1000 * A + (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee)\n   *                     = (B * inputAmountWithFeeAndTax)\n   *                       /\n   *                       (1000 * A + inputAmountWithFeeAndTax)\n   *\n   * inputAmountWithFeeAndTax = (1 - amountIn.sellFeesBips / 10000) * inputAmountWithFee\n   * outputAmountWithTax = amountOut * (1 - amountOut.buyFeesBips / 10000)\n   *\n   * @param inputAmount\n   * @param calculateFotFees\n   */\n  public getOutputAmount(\n    inputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = false\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountAfterTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          percentAfterSellFees.multiply(inputAmount).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : inputAmount\n\n    const inputAmountWithFeeAndAfterTax = JSBI.multiply(inputAmountAfterTax.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFeeAndAfterTax, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFeeAndAfterTax)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator) // JSBI.divide will round down by itself, which is desired\n    )\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountAfterTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          outputAmount.multiply(percentAfterBuyFees).quotient // fraction.quotient will round down by itself, which is desired\n        )\n      : outputAmount\n    if (JSBI.equal(outputAmountAfterTax.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n\n    return [\n      outputAmountAfterTax,\n      new Pair(inputReserve.add(inputAmountAfterTax), outputReserve.subtract(outputAmountAfterTax))\n    ]\n  }\n\n  /**\n   * getAmountIn is the linear algebra of reserve ratio against amountIn:amountOut.\n   * https://ethereum.stackexchange.com/questions/101629/what-is-math-for-uniswap-calculates-the-amountout-and-amountin-why-997-and-1000\n   * has the math deduction for the reserve calculation without fee-on-transfer fees.\n   *\n   * With fee-on-transfer fees, intuitively it's just:\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (1 - amountIn.sellFeesBips / 10000) / 0.997\n   *\n   * But we are illustrating the math deduction below to ensure that's the case.\n   *\n   * before swap A * B = K where A = reserveIn B = reserveOut\n   *\n   * after swap A' * B' = K where only k is a constant value\n   *\n   * getAmountIn\n   *\n   * B' = B - amountOut * (1 - amountOut.buyFeesBips / 10000)\n   * A' = A + 0.997 * (1 - amountIn.sellFeesBips / 10000) * amountIn # here 0.3% is deducted\n   * amountIn = (A' - A) / (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (K / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = (AB / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)) - A)\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((AB - AB + A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (0.997 * (1 - amountIn.sellFeesBips / 10000))\n   *          = ((A * 1000 * amountOut / (1 - amountOut.buyFeesBips / 10000)) / (B - amountOut / (1 - amountOut.buyFeesBips / 10000)))\n   *            /\n   *            (997 * (1 - amountIn.sellFeesBips / 10000))\n   *\n   * outputAmountWithTax = amountOut / (1 - amountOut.buyFeesBips / 10000)\n   * inputAmountWithTax = amountIn / (997 * (1 - amountIn.sellFeesBips / 10000))\n   *                    = (A * outputAmountWithTax * 1000) / ((B - outputAmountWithTax) * 997)\n   *\n   * @param outputAmount\n   */\n  public getInputAmount(\n    outputAmount: CurrencyAmount<Token>,\n    calculateFotFees: boolean = false\n  ): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    const percentAfterBuyFees = calculateFotFees ? this.derivePercentAfterBuyFees(outputAmount) : ZERO_PERCENT\n    const outputAmountBeforeTax = percentAfterBuyFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          outputAmount.currency,\n          JSBI.add(outputAmount.divide(percentAfterBuyFees).quotient, ONE) // add 1 for rounding up\n        )\n      : outputAmount\n\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient) ||\n      JSBI.greaterThanOrEqual(outputAmountBeforeTax.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmountBeforeTax.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmountBeforeTax.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE) // add 1 here is part of the formula, no rounding needed here, since there will not be decimal at this point\n    )\n\n    const percentAfterSellFees = calculateFotFees ? this.derivePercentAfterSellFees(inputAmount) : ZERO_PERCENT\n    const inputAmountBeforeTax = percentAfterSellFees.greaterThan(ZERO_PERCENT)\n      ? CurrencyAmount.fromRawAmount(\n          inputAmount.currency,\n          JSBI.add(inputAmount.divide(percentAfterSellFees).quotient, ONE) // add 1 for rounding up\n        )\n      : inputAmount\n    return [inputAmountBeforeTax, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n\n  private derivePercentAfterSellFees(inputAmount: CurrencyAmount<Token>): Percent {\n    const sellFeeBips = this.token0.wrapped.equals(inputAmount.wrapped.currency)\n      ? this.token0.wrapped.sellFeeBps\n      : this.token1.wrapped.sellFeeBps\n    if (sellFeeBips?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(sellFeeBips)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n\n  private derivePercentAfterBuyFees(outputAmount: CurrencyAmount<Token>): Percent {\n    const buyFeeBps = this.token0.wrapped.equals(outputAmount.wrapped.currency)\n      ? this.token0.wrapped.buyFeeBps\n      : this.token1.wrapped.buyFeeBps\n    if (buyFeeBps?.gt(BigNumber.from(0))) {\n      return ONE_HUNDRED_PERCENT.subtract(new Percent(JSBI.BigInt(buyFeeBps)).divide(BASIS_POINTS))\n    } else {\n      return ZERO_PERCENT\n    }\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from './entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"],"names":["INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","FIVE","_997","_1000","BASIS_POINTS","ZERO_PERCENT","Percent","ONE_HUNDRED_PERCENT","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","_this","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","_this2","computePairAddress","factoryAddress","tokenA","tokenB","sortsBefore","getCreate2Address","keccak256","pack","address","Pair","currencyAmountA","tokenAmountB","tokenAmounts","currency","liquidityToken","Token","chainId","getAddress","involvesToken","token","equals","this","token0","token1","priceOf","invariant","token0Price","token1Price","reserveOf","reserve0","reserve1","getOutputAmount","inputAmount","calculateFotFees","equal","quotient","inputReserve","outputReserve","percentAfterSellFees","derivePercentAfterSellFees","inputAmountAfterTax","greaterThan","CurrencyAmount","fromRawAmount","multiply","inputAmountWithFeeAndAfterTax","numerator","denominator","add","outputAmount","divide","percentAfterBuyFees","derivePercentAfterBuyFees","outputAmountAfterTax","subtract","getInputAmount","outputAmountBeforeTax","greaterThanOrEqual","getLiquidityMinted","totalSupply","tokenAmountA","liquidity","sqrt","amount0","amount1","lessThanOrEqual","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","sellFeeBips","wrapped","sellFeeBps","gt","BigNumber","from","buyFeeBps","result","Price","Route","pairs","input","output","length","every","pair","wrappedInput","path","entries","currentInput","push","_midPrice","prices","reduced","slice","reduce","accumulator","currentValue","inputOutputComparator","a","b","equalTo","lessThan","tradeComparator","ioComp","priceImpact","route","Trade","amount","tradeType","Array","TradeType","EXACT_INPUT","i","fromFractionalAmount","executionPrice","computePriceImpact","midPrice","exactIn","amountIn","exactOut","amountOut","EXACT_OUTPUT","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","Fraction","invert","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","nextAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","error","isInsufficientInputAmountError","sortedInsert","pairsExcludingThisPair","concat","worstExecutionPrice","bestTradeExactOut","currencyIn","currencyAmountOut","nextAmountOut","tokenIn","isInsufficientReservesError","toHex","currencyAmount","toString","Router","swapCallParameters","trade","options","etherIn","isNative","etherOut","ttl","methodName","args","value","to","validateAndParseAddress","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer"],"mappings":"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"}